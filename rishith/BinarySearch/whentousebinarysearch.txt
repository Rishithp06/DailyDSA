Hereâ€™s the text formatted for pasting into a `.txt` file:

---

**When to Apply Binary Search**

Binary Search is a highly efficient algorithm used to solve problems that involve searching for an element, a specific value, or an optimal solution within a sorted dataset or a defined range of possible answers. It works by repeatedly dividing the search space into two halves and narrowing the range based on conditions, achieving a time complexity of O(log n).

---

**Key Requirements for Binary Search**

1. **Sorted Dataset**:  
   - The dataset or search space must be sorted (in ascending or descending order).

2. **Monotonic Property**:  
   - The problem must exhibit a property where the condition being checked changes consistently (e.g., from `true` to `false` or vice versa) as you move across the search space.

---

**Binary Search Techniques**

1. **Standard Binary Search (For Exact Match)**  
   **Use Case**: Find the position of a target element in a sorted array.  
   **Steps**:
   - Start with `low = 0` and `high = n - 1` (n is the size of the array).
   - Calculate `mid = (low + high) / 2`.
   - Compare `arr[mid]` with the target:
     - If `arr[mid] == target`, return `mid`.
     - If `arr[mid] < target`, move to the right: `low = mid + 1`.
     - If `arr[mid] > target`, move to the left: `high = mid - 1`.
   - If the loop ends without finding the target, return `-1`.

   **Example**:  
   Find the index of 7 in `[1, 3, 5, 7, 9, 11]`.  
   Output: Index `3`.

---

2. **Binary Search for First or Last Occurrence**  
   **Use Case**: Find the first or last occurrence of a number in a sorted array that may contain duplicates.  
   **Steps**:
   - Use standard binary search but maintain an additional `result` variable.
   - When `arr[mid] == target`, update `result = mid` and continue:
     - For the first occurrence: search in the left half (`high = mid - 1`).
     - For the last occurrence: search in the right half (`low = mid + 1`).

   **Example**:  
   Find the first occurrence of 3 in `[1, 3, 3, 3, 5]`.  
   Output: Index `1`.

---

3. **Binary Search on Answer (Search Space Problems)**  
   **Use Case**: Find the optimal solution within a range of possible answers when the solution itself is not in the array.  
   **Steps**:
   - Define the **search space** (`low` and `high`) based on the problem.
   - Calculate `mid = (low + high) / 2` as a potential answer.
   - Check if `mid` satisfies the problem's condition:
     - If it does, narrow down the range (depending on whether you're minimizing or maximizing).
   - Repeat until the optimal solution is found.

---

**Examples of Binary Search on Answer**

1. **Find Square Root of a Number**  
   **Problem**: Find the floor of the square root of n (e.g., n = 10).  
   **Steps**:
   - Set `low = 1` and `high = n`.
   - Use binary search to test if `mid * mid <= n`:
     - If true, move to the right: `low = mid + 1`.
     - Otherwise, move to the left: `high = mid - 1`.
   - Return `high` as the floor square root.

   **Output**: For n = 10, the result is `3`.

---

2. **Allocate Minimum Pages**  
   **Problem**: Given N books and M students, minimize the maximum number of pages a student reads.  
   **Steps**:
   - Search space is between `max(books)` and `sum(books)`.
   - Test if a candidate solution (`mid`) allows all students to read without exceeding `mid` pages.
   - Adjust the range:
     - If valid, try a smaller maximum: `high = mid - 1`.
     - If invalid, try a larger maximum: `low = mid + 1`.

   **Output**: For books `[10, 20, 30, 40]` and students `2`, the result is `60`.

---

3. **Aggressive Cows**  
   **Problem**: Place C cows in N stalls to maximize the minimum distance between any two cows.  
   **Steps**:
   - Define the range of possible distances (`low = 1`, `high = max(stalls) - min(stalls)`).
   - Check if a candidate distance (`mid`) is feasible by placing all cows.
   - Adjust the range:
     - If feasible, increase the distance: `low = mid + 1`.
     - If not feasible, decrease the distance: `high = mid - 1`.

   **Output**: For stalls `[1, 2, 4, 8, 9]` and cows `3`, the result is `4`.

---

4. **Binary Search on 2D Arrays**  
   **Use Case**: Search for an element in a row-wise and column-wise sorted matrix.  
   **Steps**:
   - Treat the 2D array as a 1D array using indices:
     - Map `mid` to `row = mid / cols` and `col = mid % cols`.
   - Perform binary search on this "virtual" 1D array.

   **Example**:  
   Find `7` in:  
   `[1, 3, 5]`  
   `[7, 9, 11]`  
   `[13, 15, 17]`  
   Output: Found at `(1, 0)`.

---

5. **Ternary Search (Variation)**  
   **Use Case**: Find the maximum (or minimum) of a unimodal function.  
   **Steps**:
   - Divide the search range into three parts: left, middle, right.
   - Compare function values at two points.
   - Narrow down the range to the side containing the peak.

   **Example**:  
   Find the maximum value of `f(x) = -x^2 + 4x + 6`.  
   Output: Maximum is at `x = 2`.

---

**Binary Search Template**

```cpp
int binarySearch(vector<int>& arr, int target) {
    int low = 0, high = arr.size() - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2; // Avoid overflow
        if (arr[mid] == target) return mid; // Found target
        if (arr[mid] < target) low = mid + 1; // Move right
        else high = mid - 1; // Move left
    }
    return -1; // Target not found
}
```

---

**Key Tips for Binary Search**

1. Always check edge cases (e.g., empty array, one element).  
2. Avoid infinite loops by correctly updating `low` and `high`.  
3. For "answer space" problems, ensure the condition is monotonic.  
4. Visualize the problem as narrowing down a sorted range of possible solutions.  

